{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/isaac/Desktop/PDP-Website/pages/announcements.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Sanity from '../sanity-client.js';\nimport Header from '../components/Header.js';\nimport Footer from '../components/Footer.js';\nimport Document from '../components/Document.js';\nimport autoBind from 'react-autobind';\nimport BottomScrollListener from 'react-bottom-scroll-listener';\nimport Sidebar from \"../components/Sidebar.js\";\nimport Link from 'next/link';\nimport \"../styles/sidebar.sass\";\n\nclass Announcements extends React.Component {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"state\", {\n      announcements: [],\n      sidebarOpen: false\n    });\n\n    autoBind(this);\n  }\n\n  componentDidMount() {\n    var data = this.props.data;\n    this.setState({\n      announcements: data\n    });\n  }\n\n  async getNextPage() {\n    var startIndex = this.state.announcements.length;\n    var endIndex = startIndex + this.props.pageIncrement;\n    var query = `*[_type == \"announcement\"] | order(date desc) [${startIndex}...${endIndex}]`;\n    var newData = await Sanity.fetch(query, {});\n    var oldData = this.state.announcements;\n    this.setState({\n      announcements: oldData.concat(newData)\n    });\n  }\n\n  onSetSidebarOpen(open) {\n    this.setState({\n      sidebarOpen: open\n    });\n  }\n\n  render() {\n    var data = this.state.announcements;\n\n    for (var announcement of data) {\n      announcement.readableDate = new Date(announcement._createdAt).toLocaleString([], {\n        year: 'numeric',\n        month: '2-digit',\n        day: 'numeric',\n        hour: \"numeric\",\n        minute: \"numeric\"\n      });\n    }\n\n    var announcements = data.map(itemData => __jsx(Document, {\n      data: itemData,\n      image: \"heroImage\",\n      headline: \"title\",\n      body: \"body\",\n      primaryDetail: \"readableDate\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }));\n    var ArchiveItems = this.props.allAnnouncements.map(itemData => __jsx(Link, {\n      href: \"/pressclip/\" + itemData.slug.current,\n      to: \"/announcement/\" + itemData.slug.current,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, __jsx(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, itemData.title)));\n    console.log(this.props.allAnnouncements);\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, __jsx(\"title\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"PDP\"), __jsx(Header, {\n      CurrentPage: \"Announcements\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }), announcements, __jsx(Sidebar, {\n      headline: \"Archive\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, ArchiveItems), __jsx(BottomScrollListener, {\n      onBottom: this.getNextPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), __jsx(Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }));\n  }\n\n}\n\nAnnouncements.getInitialProps = async function (context) {\n  // Get announcements\n  const pageIncrement = 2;\n  var query = `*[_type == \"announcement\"] | order(date desc) [0...${pageIncrement}]`;\n  var data = await Sanity.fetch(query, {}); // Get names of ALL announcements\n\n  query = `*[_type == \"announcement\"]{ title, slug }`;\n  var allAnnouncements = await Sanity.fetch(query, {});\n  console.log(allAnnouncements);\n  return {\n    data: data,\n    pageIncrement: pageIncrement,\n    allAnnouncements: allAnnouncements\n  };\n};\n\nexport default Announcements;","map":{"version":3,"sources":["/Users/isaac/Desktop/PDP-Website/pages/announcements.js"],"names":["React","Sanity","Header","Footer","Document","autoBind","BottomScrollListener","Sidebar","Link","Announcements","Component","constructor","announcements","sidebarOpen","componentDidMount","data","props","setState","getNextPage","startIndex","state","length","endIndex","pageIncrement","query","newData","fetch","oldData","concat","onSetSidebarOpen","open","render","announcement","readableDate","Date","_createdAt","toLocaleString","year","month","day","hour","minute","map","itemData","ArchiveItems","allAnnouncements","slug","current","title","console","log","getInitialProps","context"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Sanity from '../sanity-client.js'\nimport Header from '../components/Header.js'\nimport Footer from '../components/Footer.js'\nimport Document from '../components/Document.js'\nimport autoBind from 'react-autobind';\nimport BottomScrollListener from 'react-bottom-scroll-listener';\nimport Sidebar from \"../components/Sidebar.js\";\nimport Link from 'next/link'\n\nimport \"../styles/sidebar.sass\"\n\nclass Announcements extends React.Component {\n  constructor() {\n    super();\n    autoBind(this);\n  }\n\n  state = {\n    announcements: [],\n    sidebarOpen: false\n  }\n  componentDidMount(){\n    var data = this.props.data\n    this.setState({announcements: data})\n  }\n  async getNextPage(){\n    var startIndex = this.state.announcements.length\n    var endIndex = startIndex + this.props.pageIncrement\n    var query = `*[_type == \"announcement\"] | order(date desc) [${startIndex}...${endIndex}]`\n    var newData = await Sanity.fetch(query, {})\n    var oldData = this.state.announcements\n    this.setState({announcements:oldData.concat(newData)})\n  }\n\n  onSetSidebarOpen(open) {\n    this.setState({ sidebarOpen: open });\n  }\n  render(){\n    var data = this.state.announcements\n    for(var announcement of data){\n      announcement.readableDate = (new Date(announcement._createdAt)).toLocaleString([], {year:'numeric', month: '2-digit', day:'numeric', hour: \"numeric\", minute: \"numeric\"})\n    }\n    var announcements = data.map(itemData => (\n      <Document data={itemData} image={\"heroImage\"} headline={\"title\"} body={\"body\"} primaryDetail={\"readableDate\"}/>\n    ))\n    var ArchiveItems = this.props.allAnnouncements.map(itemData => (\n      <Link href={\"/pressclip/\" + itemData.slug.current} to={\"/announcement/\" + itemData.slug.current}><li>{itemData.title}</li></Link>\n    ))\n    console.log(this.props.allAnnouncements)\n    return(\n      <div>\n        <title>PDP</title>\n        <Header CurrentPage=\"Announcements\"/>\n        {announcements}\n        <Sidebar headline=\"Archive\">{ArchiveItems}</Sidebar>\n        <BottomScrollListener onBottom={this.getNextPage}/>\n        <Footer/>\n      </div>\n    )\n  }\n}\n\nAnnouncements.getInitialProps = async function(context){\n  // Get announcements\n  const pageIncrement = 2\n  var query = `*[_type == \"announcement\"] | order(date desc) [0...${pageIncrement}]`\n  var data = await Sanity.fetch(query, {})\n  // Get names of ALL announcements\n  query = `*[_type == \"announcement\"]{ title, slug }`\n  var allAnnouncements = await Sanity.fetch(query, {})\n  console.log(allAnnouncements)\n  return {data: data, pageIncrement: pageIncrement, allAnnouncements: allAnnouncements}\n}\n\nexport default Announcements;\n"]},"metadata":{},"sourceType":"module"}