{"ast":null,"code":"import _getIterator from \"@babel/runtime-corejs2/core-js/get-iterator\";\nimport { projectId, dataset } from \"./sanity-client.js\"; // Sort data by timeDelta value in ascending order\n\nexport function sortByTimeDelta(data) {\n  // Give each announcement/event a \"timeDelta\" value that is the number of milliseconds between when an announcement was last updated or an event occurs.\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = _getIterator(data), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var item = _step.value;\n      var itemTime = 0;\n\n      if (item._type == \"event\") {\n        var itemTime = Date.parse(item.date);\n      } else if (item._type == \"announcement\") {\n        var itemTime = Date.parse(item._updatedAt);\n      }\n\n      item.timeDelta = Math.abs(itemTime - new Date().getTime());\n    } // Sort\n\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n        _iterator[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  data.sort(function compare(a, b) {\n    if (a.timeDelta < b.timeDelta) {\n      return -1;\n    }\n\n    if (a.timeDelta > b.timeDelta) {\n      return 1;\n    }\n\n    return 0;\n  });\n  return data;\n} // Custom UrlBuilder\n\nexport function SanityImageUrl(image, options) {\n  // Build assetID\n  var fullRef = image.asset._ref;\n  var ref = fullRef.split(\"-\");\n  var assetID = ref[1];\n  var dimensions = ref[2];\n  var extension = ref[3];\n  var assetID = assetID + \"-\" + dimensions + \".\" + extension; // Assemble baseURL\n\n  var baseArray = [\"https://cdn.sanity.io/images\", projectId, dataset, assetID];\n  var baseURL = baseArray.join(\"/\"); // Assemble queryString\n\n  var params = [];\n\n  for (var key in options) {\n    var param = key + \"=\" + options[key];\n    params.push(param);\n  }\n\n  if (!(\"fit\" in options)) {\n    params.push(\"fit=crop\");\n  }\n\n  if (!(\"crop\" in options)) {\n    params.push(\"crop=focalpoint\");\n    var focalPoint = findFocalPoint(image);\n    params.push(\"fp-x=\" + focalPoint.x);\n    params.push(\"fp-y=\" + focalPoint.y);\n  }\n\n  params.push(\"q=80\");\n  params.push(\"auto=format\");\n  var queryString = params.join(\"&\"); // Assemble fullURL\n\n  var fullURL = baseURL + \"?\" + queryString;\n  return fullURL;\n}\nexport function SortProjects(raw) {\n  var sorted = [];\n  var prioritized = [];\n  var nonPrioritized = [];\n\n  for (var i = 0; i < raw.length; i++) {\n    if (raw[i].node.order > 0) {\n      prioritized.push(raw[i]);\n    } else {\n      nonPrioritized.push(raw[i]);\n    }\n  }\n\n  nonPrioritized.sort(function (a, b) {\n    return Date.parse(b.node._updatedAt) - Date.parse(a.node._updatedAt);\n  });\n  sorted = nonPrioritized;\n\n  for (var i = 0; i < prioritized.length; i++) {\n    sorted.splice(prioritized[i].node.order - 1, 0, prioritized[i]);\n  }\n\n  return sorted;\n}\nexport function findFocalPoint(image) {\n  if (\"hotspot\" in image) {\n    var x = image.hotspot.x;\n    var y = image.hotspot.y;\n    return {\n      x: x,\n      y: y\n    };\n  } else {\n    return {\n      x: 0.5,\n      y: 0.5\n    };\n  }\n}","map":null,"metadata":{},"sourceType":"module"}