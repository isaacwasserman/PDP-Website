{"ast":null,"code":"import _getIterator from \"@babel/runtime-corejs2/core-js/get-iterator\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/isaac/Desktop/PDP-Website/pages/announcements.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Sanity from '../sanity-client.js';\nimport Header from '../components/Header.js';\nimport Footer from '../components/Footer.js';\nimport Document from '../components/Document.js';\nimport autoBind from 'react-autobind';\nimport BottomScrollListener from 'react-bottom-scroll-listener';\nimport Sidebar from \"../components/Sidebar.js\";\nimport Link from 'next/link';\nimport \"../styles/sidebar.sass\";\n\nvar Announcements =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Announcements, _React$Component);\n\n  function Announcements() {\n    var _this;\n\n    _classCallCheck(this, Announcements);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Announcements).call(this));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      announcements: [],\n      sidebarOpen: false\n    });\n\n    autoBind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Announcements, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var data = this.props.data;\n      this.setState({\n        announcements: data\n      });\n    }\n  }, {\n    key: \"getNextPage\",\n    value: function () {\n      var _getNextPage = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var startIndex, endIndex, query, newData, oldData;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                startIndex = this.state.announcements.length;\n                endIndex = startIndex + this.props.pageIncrement;\n                query = \"*[_type == \\\"announcement\\\"] | order(date desc) [\".concat(startIndex, \"...\").concat(endIndex, \"]\");\n                _context.next = 5;\n                return Sanity.fetch(query, {});\n\n              case 5:\n                newData = _context.sent;\n                oldData = this.state.announcements;\n                this.setState({\n                  announcements: oldData.concat(newData)\n                });\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getNextPage() {\n        return _getNextPage.apply(this, arguments);\n      }\n\n      return getNextPage;\n    }()\n  }, {\n    key: \"onSetSidebarOpen\",\n    value: function onSetSidebarOpen(open) {\n      this.setState({\n        sidebarOpen: open\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var data = this.state.announcements;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _getIterator(data), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var announcement = _step.value;\n          announcement.readableDate = new Date(announcement.date).toLocaleString([], {\n            year: 'numeric',\n            month: '2-digit',\n            day: 'numeric'\n          });\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      var announcements = data.map(function (itemData) {\n        return __jsx(Document, {\n          data: itemData,\n          image: \"heroImage\",\n          headline: \"title\",\n          body: \"body\",\n          primaryDetail: \"primaryDetail\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        });\n      });\n      var ArchiveItems = this.props.allAnnouncements.map(function (itemData) {\n        return __jsx(Link, {\n          href: \"/pressclip/\" + itemData.slug.current,\n          to: \"/announcement/\" + itemData.slug.current,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }, __jsx(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }, itemData.title));\n      });\n      console.log(this.props.allAnnouncements);\n      return __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, __jsx(\"title\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, \"PDP\"), __jsx(Header, {\n        CurrentPage: \"Announcements\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }), announcements, __jsx(Sidebar, {\n        headline: \"Archive\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, ArchiveItems), __jsx(BottomScrollListener, {\n        onBottom: this.getNextPage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }), __jsx(Footer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Announcements;\n}(React.Component);\n\nAnnouncements.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(context) {\n    var pageIncrement, query, data, allAnnouncements;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            // Get announcements\n            pageIncrement = 2;\n            query = \"*[_type == \\\"announcement\\\"] | order(date desc) [0...\".concat(pageIncrement, \"]\");\n            _context2.next = 4;\n            return Sanity.fetch(query, {});\n\n          case 4:\n            data = _context2.sent;\n            // Get names of ALL announcements\n            query = \"*[_type == \\\"announcement\\\"]{ title, slug }\";\n            _context2.next = 8;\n            return Sanity.fetch(query, {});\n\n          case 8:\n            allAnnouncements = _context2.sent;\n            console.log(allAnnouncements);\n            return _context2.abrupt(\"return\", {\n              data: data,\n              pageIncrement: pageIncrement,\n              allAnnouncements: allAnnouncements\n            });\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default Announcements;","map":{"version":3,"sources":["/Users/isaac/Desktop/PDP-Website/pages/announcements.js"],"names":["React","Sanity","Header","Footer","Document","autoBind","BottomScrollListener","Sidebar","Link","Announcements","announcements","sidebarOpen","data","props","setState","startIndex","state","length","endIndex","pageIncrement","query","fetch","newData","oldData","concat","open","announcement","readableDate","Date","date","toLocaleString","year","month","day","map","itemData","ArchiveItems","allAnnouncements","slug","current","title","console","log","getNextPage","Component","getInitialProps","context"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Sanity from '../sanity-client.js'\nimport Header from '../components/Header.js'\nimport Footer from '../components/Footer.js'\nimport Document from '../components/Document.js'\nimport autoBind from 'react-autobind';\nimport BottomScrollListener from 'react-bottom-scroll-listener';\nimport Sidebar from \"../components/Sidebar.js\";\nimport Link from 'next/link'\n\nimport \"../styles/sidebar.sass\"\n\nclass Announcements extends React.Component {\n  constructor() {\n    super();\n    autoBind(this);\n  }\n\n  state = {\n    announcements: [],\n    sidebarOpen: false\n  }\n  componentDidMount(){\n    var data = this.props.data\n    this.setState({announcements: data})\n  }\n  async getNextPage(){\n    var startIndex = this.state.announcements.length\n    var endIndex = startIndex + this.props.pageIncrement\n    var query = `*[_type == \"announcement\"] | order(date desc) [${startIndex}...${endIndex}]`\n    var newData = await Sanity.fetch(query, {})\n    var oldData = this.state.announcements\n    this.setState({announcements:oldData.concat(newData)})\n  }\n\n  onSetSidebarOpen(open) {\n    this.setState({ sidebarOpen: open });\n  }\n  render(){\n    var data = this.state.announcements\n    for(var announcement of data){\n      announcement.readableDate = (new Date(announcement.date)).toLocaleString([], {year:'numeric', month: '2-digit', day:'numeric'})\n    }\n    var announcements = data.map(itemData => (\n      <Document data={itemData} image={\"heroImage\"} headline={\"title\"} body={\"body\"} primaryDetail={\"primaryDetail\"}/>\n    ))\n    var ArchiveItems = this.props.allAnnouncements.map(itemData => (\n      <Link href={\"/pressclip/\" + itemData.slug.current} to={\"/announcement/\" + itemData.slug.current}><li>{itemData.title}</li></Link>\n    ))\n    console.log(this.props.allAnnouncements)\n    return(\n      <div>\n        <title>PDP</title>\n        <Header CurrentPage=\"Announcements\"/>\n        {announcements}\n        <Sidebar headline=\"Archive\">{ArchiveItems}</Sidebar>\n        <BottomScrollListener onBottom={this.getNextPage}/>\n        <Footer/>\n      </div>\n    )\n  }\n}\n\nAnnouncements.getInitialProps = async function(context){\n  // Get announcements\n  const pageIncrement = 2\n  var query = `*[_type == \"announcement\"] | order(date desc) [0...${pageIncrement}]`\n  var data = await Sanity.fetch(query, {})\n  // Get names of ALL announcements\n  query = `*[_type == \"announcement\"]{ title, slug }`\n  var allAnnouncements = await Sanity.fetch(query, {})\n  console.log(allAnnouncements)\n  return {data: data, pageIncrement: pageIncrement, allAnnouncements: allAnnouncements}\n}\n\nexport default Announcements;\n"]},"metadata":{},"sourceType":"module"}