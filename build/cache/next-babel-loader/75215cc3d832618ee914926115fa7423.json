{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport Link from \"next/link\";\nimport autoBind from 'react-autobind';\nimport Head from 'next/head';\nimport LinesEllipsis from 'react-lines-ellipsis';\nimport Truncate from 'react-truncate';\nimport responsiveHOC from 'react-lines-ellipsis/lib/responsiveHOC';\nimport { Textfit } from 'react-textfit';\nimport innerText from 'react-innertext';\nimport \"../styles/DocumentListStyle.sass\";\nimport Sanity from '../sanity-client.js';\nimport { SanityImageUrl } from '../helperFunctions.js';\n\nvar BlockContent = require('@sanity/block-content-to-react');\n\nvar ResponsiveEllipsis = responsiveHOC()(LinesEllipsis);\n\nvar DocumentList =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DocumentList, _React$Component);\n\n  function DocumentList() {\n    var _this;\n\n    _classCallCheck(this, DocumentList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DocumentList).call(this));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      data: []\n    });\n\n    return _this;\n  }\n\n  _createClass(DocumentList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        data: this.props.data\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var data = this.state.data;\n\n      if (\"maxLength\" in this.props) {\n        data = data.slice(0, 3);\n      }\n\n      var headlineKey = this.props.headline;\n      var imageKey = this.props.image;\n      var primaryDetailKey = this.props.primaryDetail;\n      var secondaryDetailKey = this.props.secondaryDetail;\n      var bodyKey = this.props.body;\n      var serializers = {\n        types: {\n          code: function code(props) {\n            return __jsx(\"pre\", {\n              \"data-language\": props.node.language\n            }, __jsx(\"code\", null, props.node.code));\n          }\n        }\n      };\n\n      var returnImg = function returnImg(item) {\n        if (imageKey == null) {\n          return '';\n        } else if (!(imageKey in item)) {\n          return '';\n        } else if (!(\"asset\" in item[imageKey])) {\n          return '';\n        } else {\n          return __jsx(\"img\", {\n            \"class\": \"DocumentListItemImage\",\n            src: SanityImageUrl(item[imageKey], {\n              w: 730,\n              h: 730\n            })\n          });\n        }\n      };\n\n      var Items = data.slice(0, this.props.limit).map(function (itemData) {\n        return __jsx(Link, {\n          href: \"/\" + itemData._type + \"/[slug]\",\n          as: \"/\" + itemData._type + \"/\" + itemData.slug.current\n        }, __jsx(\"li\", {\n          className: \"DocumentListItem\",\n          key: itemData._id\n        }, __jsx(\"div\", {\n          className: \"DocumentListItemBody\"\n        }, returnImg(itemData), __jsx(\"div\", {\n          className: \"DocumentListItemText\"\n        }, __jsx(Textfit, {\n          max: 32,\n          mode: \"single\",\n          className: \"DocumentListItemName\"\n        }, itemData[headlineKey]), __jsx(\"h2\", {\n          className: \"DocumentListItemName-Mobile\"\n        }, itemData[headlineKey]), __jsx(Textfit, {\n          max: 14,\n          mode: \"single\",\n          className: \"DocumentListItemInfo\"\n        }, __jsx(\"span\", {\n          className: \"DocumentListItemDate\"\n        }, itemData[primaryDetailKey]), \"\\xA0\", __jsx(\"span\", {\n          className: \"DocumentListItemInfoDivider\",\n          style: {\n            opacity: secondaryDetailKey == null || itemData[secondaryDetailKey] == '' ? '0' : '1'\n          }\n        }, \" | \"), __jsx(\"span\", {\n          className: \"DocumentListItemPrice\",\n          style: {\n            display: itemData[secondaryDetailKey] == '' ? 'none' : 'inline'\n          }\n        }, itemData[secondaryDetailKey])), __jsx(Truncate, {\n          lines: 4,\n          ellipsis: \"...\",\n          className: \"DocumentListItemDescription\"\n        }, __jsx(BlockContent, {\n          blocks: itemData[bodyKey],\n          serializers: serializers,\n          projectId: \"ocpl5ulk\",\n          dataset: \"pdp-data\"\n        }))))));\n      });\n      return __jsx(\"ul\", {\n        id: \"DocumentList\"\n      }, Items);\n    }\n  }]);\n\n  return DocumentList;\n}(React.Component);\n\nexport { DocumentList as default };","map":null,"metadata":{},"sourceType":"module"}